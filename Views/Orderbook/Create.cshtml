@model DistributerManagementSystemModels.Orderbook

@{
    ViewData["Title"] = "Create Order";
}

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">Create Order</h4>
                </div>
                <div class="card-body">
                    @if (ViewBag.CustomMessage != null)
                    {
                        <div class="alert alert-info">
                            @ViewBag.CustomMessage
                        </div>
                    }
                    <form asp-action="Create">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

  

                        <!-- Retailer Name -->
                        <div class="form-group">
                            <label asp-for="RetailerName" class="control-label"></label>
                            @if (ViewBag.AddMore == null)
                            {
                                <!-- Dropdown if AddMore is null -->
                                <select asp-for="RetailerName" class="form-control" asp-items="ViewBag.Retailer" id="RetailerDropdown">
                                    <option value="">Select Retailer</option>
                                </select>
                                <!-- Hidden input to store the selected retailer text -->
                                <input type="hidden" id="RetailerNameText" name="RetailerNameText" />
                            }
                            else
                            {
                                <!-- Read-only input if AddMore is not null -->
                                <input asp-for="RetailerName" type="text" class="form-control" value="@ViewBag.AddMore" readonly />
                                <!-- This hidden input keeps the retailer name in sync -->
                                <input type="hidden" name="RetailerNameText" value="@ViewBag.AddMore" />
                            }
                            <span asp-validation-for="RetailerName" class="text-danger"></span>
                        </div>



                        <!-- Product Name -->
                        <div class="form-group">
                            <label asp-for="ProductName" class="control-label"></label>
                            <select asp-for="ProductName" id="ProductDropdown" class="form-control" asp-items="ViewBag.ProductName"></select>
                            <!-- Hidden input to store the selected product text -->
                            <input type="hidden" id="ProductNameText" name="ProductNameText" />
                            <span asp-validation-for="ProductName" class="text-danger"></span>
                        </div>

                        <!-- Quantity -->
                        <div class="form-group">
                            <label asp-for="Quantity" class="control-label"></label>
                            <input asp-for="Quantity" id="QuantityInput" class="form-control" />
                            <span asp-validation-for="Quantity" class="text-danger"></span>
                        </div>

                        <!-- Price (Read-only) -->
                        <div class="form-group">
                            <label class="control-label">Price</label>
                            <input id="prices" class="form-control" readonly style="pointer-events: none;">
                        </div>

                        <!-- GST (Read-only) -->
                        <div class="form-group">
                            <label class="control-label">GST On Product</label>
                            <input id="GSTDropdown" class="form-control" readonly style="pointer-events: none;">
                        </div>

                        <!-- Total Amount (Read-only) -->
                        <div class="form-group">
                            <label asp-for="TotalAmount" class="control-label"></label>
                            <input asp-for="TotalAmount" id="TotalAmountInput" class="form-control" readonly style="pointer-events: none;" />
                            <span asp-validation-for="TotalAmount" class="text-danger"></span>
                        </div>

                        <!-- Amount Paid -->
                        <div class="form-group">
                            <label asp-for="AmountPaid" class="control-label"></label>
                            <input asp-for="AmountPaid" class="form-control" />
                            <span asp-validation-for="AmountPaid" class="text-danger"></span>
                        </div>

                        <!-- Is Paid Checkbox -->
                        <div class="form-group form-check">
                            <input class="form-check-input" asp-for="IsPaid" />
                            <label class="form-check-label">
                                @Html.DisplayNameFor(model => model.IsPaid)
                            </label>
                        </div>

                        <!-- Action Buttons -->
                        <div class="form-group text-center">
                            <input type="submit" name="AddMore" value="Add More" class="btn btn-success mr-2" />
                            <input type="submit" name="AddMore" value="Review Order" class="btn btn-primary" />
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <div class="mt-3 text-center">
        <a asp-action="Index" class="btn btn-outline-secondary">Back to List</a>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    @{
        var rateList = ViewBag.Rate as IEnumerable<SelectListItem>;
        var productPrices = rateList?.ToDictionary(item => item.Value, item => item.Text);

        var gstList = ViewBag.GST as IEnumerable<SelectListItem>;
        var productGST = gstList?.ToDictionary(item => item.Value, item => item.Text);
    }

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Create dictionaries to store product prices and GST values
            var productPrices = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(productPrices));
            var productGST = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(productGST));

            // Function to calculate the total amount
            function calculateTotal() {
                var productId = $('#ProductDropdown').val();
                var quantity = $('#QuantityInput').val();
                var price = parseFloat(productPrices[productId]); // Get price as a float number
                var gstValue = parseFloat(productGST[productId]); // Get GST value as a float number

                if (productId && quantity && !isNaN(price)) {
                    // Calculate total amount including GST
                    var amountWithoutGST = price * quantity;
                    var gstAmount = (amountWithoutGST * gstValue) / 100; // Calculate GST amount
                    var totalAmount = Math.round(amountWithoutGST + gstAmount); // Rounds to nearest integer

                    $('#TotalAmountInput').val(totalAmount); // Set total amount
                    $('#prices').val(price.toFixed(2)); // Set the price input value
                } else {
                    $('#TotalAmountInput').val(''); // Clear total amount if invalid input
                    $('#prices').val(''); // Clear price if invalid input
                }
            }

            // Function to update GST input based on the selected product
            function updateGSTInput() {
                var productId = $('#ProductDropdown').val();
                var gstValue = productGST[productId];

                if (gstValue) {
                    $('#GSTDropdown').val(gstValue);
                } else {
                    $('#GSTDropdown').val(''); // Clear if no GST found
                }
            }

            // Attach event handlers
            $('#ProductDropdown, #QuantityInput').change(function () {
                calculateTotal();
                updateGSTInput();
            });

            // Call the functions once to set the values when the page loads
            calculateTotal();
            updateGSTInput();
        });
    </script>


    <script>
        $(document).ready(function () {
            // Update hidden fields with selected text on change
            $('#RetailerDropdown').change(function () {
                var selectedText = $(this).find("option:selected").text();
                $('#RetailerNameText').val(selectedText);
            });

            $('#ProductDropdown').change(function () {
                var selectedText = $(this).find("option:selected").text();
                $('#ProductNameText').val(selectedText);
            });
        });
    </script>
}
